<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StudyPlatform</name>
    </assembly>
    <members>
        <member name="T:StudyPlatform.Controllers.FlashcardsController">
            <summary>
            Provides endpoints for managing flashcards.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.#ctor(StudyPlatform.Services.Flashcards.IFlashcardsService)">
            <summary>
            A constructor for injecting the services.
            </summary>
            <param name="flashcardsService">The flashcards service, dependency injected.</param>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Create(StudyPlatform.Models.CreateFlashcardViewModel)">
            <summary>
            Endpoint for creating a new flashcard.
            </summary>
            <param name="model">The model for the flashcard created by the user.</param>
            <returns>A new flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.CreateBulk(System.Collections.Generic.IEnumerable{StudyPlatform.Models.CreateFlashcardViewModel})">
            <summary>
            Endpoint for creating a new flashcards from a list of models.
            </summary>
            <param name="model">The model for the flashcard created by the user.</param>
            <returns>A new flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Get(System.Int32)">
            <summary>
            Endpoint for getting a flashcard by it's ID.
            </summary>
            <param name="id">The card id..</param>
            <returns>A flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Get">
            <summary>
            Endpoint for getting all flashcards that the user owns.
            </summary>
            <returns>A list of flashcards if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.GetAllFromGroup(System.Int32,System.Int32)">
            <summary>
            Endpoint for getting all flashcards that the user owns in a certain group.
            </summary>
            <returns>A list of flashcards if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Update(StudyPlatform.Models.CreateFlashcardViewModel,System.Int32)">
            <summary>
            Endpoint for updating a specific flashcard that the user owns.
            </summary>
            <param name="model">The model for updating the flashcard.</param>
            <param name="id">The id of the flashcard.</param>
            <returns>An edited flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Delete(System.Int32[])">
            <summary>
            Endpoint for deleting an array of flashcards by their IDs.
            </summary>
            <param name="ids">The array of flashcard ids.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Generate(StudyPlatform.Models.GenerateFlashcardsViewModel)">
            <summary>
            Endpoint for generating flashcards from a file.
            </summary>
            <param name="model">The model containing the file's download url and other prompt data.</param>
            <returns>A list of flashcards if successful.</returns>
        </member>
        <member name="T:StudyPlatform.Controllers.MaterialSubGroupsController">
            <summary>
            API controller for managing material subgroups.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.#ctor(StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService)">
            <summary>
            Initializes the controller.
            </summary>
            <param name="service">The service DI.</param>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.GetBySubject(System.Int32,System.Boolean)">
            <summary>
            Gets all material subgroups for a subject.
            </summary>
            <param name="subjectId">The subject ID.</param>
            <param name="includeMaterials">Whether or not to include the materials in each group.</param>
            <returns>A list of subgroups.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.Get(System.Int32)">
            <summary>
            Gets a single material subgroup by ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <returns>The subgroup if found.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.Create(StudyPlatform.Models.CreateMaterialSubGroupViewModel)">
            <summary>
            Creates a new material subgroup.
            </summary>
            <param name="model">The subgroup creation model.</param>
            <returns>The created subgroup.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.Delete(System.Int32)">
            <summary>
            Deletes a material subgroup by ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <returns>No content if deleted.</returns>
        </member>
        <member name="T:StudyPlatform.Controllers.MindmapsController">
            <summary>
            A controller responsible for handling all requests related to mindmaps.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.MindmapsController.#ctor(StudyPlatform.Services.Mindmaps.IMindmapsService)">
            <summary>
            Initializes the MindmapsController and injects dependencies.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.MindmapsController.GetAllFromGroup(System.Int32,System.Int32)">
            <summary>
            Endpoint for getting all mindmaps that the user owns in a certain group.
            </summary>
            <returns>A list of mindmaps if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MindmapsController.Update(StudyPlatform.Models.CreateMindmapViewModel,System.Int32)">
            <summary>
            Endpoint for updating a specific mindmap that the user owns.
            </summary>
            <param name="model">The model for updating the mindmap.</param>
            <param name="id">The id of the mindmap.</param>
            <returns>An edited mindmap if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MindmapsController.Delete(System.Int32[])">
            <summary>
            Endpoint for deleting an array of mindmaps by their IDs.
            </summary>
            <param name="ids">The array of mindmap ids.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:StudyPlatform.Controllers.SubjectsController">
            <summary>
            API controller for managing subjects.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.#ctor(StudyPlatform.Services.Subjects.ISubjectsService)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Controllers.SubjectsController"/> class.
            </summary>
            <param name="service">The subjects service DI.</param>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.GetSubjectsByUser(System.Boolean,System.Boolean)">
            <summary>
            Gets all subjects for a user.
            </summary>
            <param name="includeGroups">Whether or not to include material sub groups with their materials.</param>
            <param name="includeGroupsSummary">Whether or not to include material sub groups without their materials.</param>
            <returns>A list of subjects.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.GetSubject(System.Int32)">
            <summary>
            Gets a single subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <returns>The subject if found.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.CreateSubject(StudyPlatform.Models.CreateSubjectViewModel)">
            <summary>
            Creates a new subject.
            </summary>
            <param name="model">The subject creation model.</param>
            <returns>The created subject.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.DeleteSubject(System.Int32)">
            <summary>
            Deletes a subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <returns>No content if deleted.</returns>
        </member>
        <member name="T:StudyPlatform.Data.Common.AppConstants">
            <summary>
            A static class used to abstract the commonly used constants, such as the base URL for microservices.
            </summary>
        </member>
        <member name="F:StudyPlatform.Data.Common.AppConstants.FLASHCARDS_MICROSERVICE_BASE_URL">
            <summary>
            Base url for flashcards microservice.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Common.IRepository">
            <summary>
            Abstraction of repository access methods
            </summary>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.All``1">
            <summary>
            All records in a table
            </summary>
            <returns>Queryable expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            All records in a table
            </summary>
            <returns>Queryable expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.AllReadonly``1">
            <summary>
            The result collection won't be tracked by the context
            </summary>
            <returns>Expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.AllReadonly``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The result collection won't be tracked by the context
            </summary>
            <returns>Expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.GetByIdAsync``1(System.Object)">
            <summary>
            Gets specific record from database by primary key
            </summary>
            <param name="id">record identificator</param>
            <returns>Single record</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.AddAsync``1(``0)">
            <summary>
            Adds entity to the database
            </summary>
            <param name="entity">Entity to add</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.AddRangeAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ads collection of entities to the database
            </summary>
            <param name="entities">Enumerable list of entities</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.Update``1(``0)">
            <summary>
            Updates a record in database
            </summary>
            <param name="entity">Entity for record to be updated</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.UpdateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates set of records in the database
            </summary>
            <param name="entities">Enumerable collection of entities to be updated</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.DeleteAsync``1(System.Object)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="id">Identificator of record to be deleted</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.Delete``1(``0)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="entity">Entity representing record to be deleted</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.Detach``1(``0)">
            <summary>
            Detaches given entity from the context
            </summary>
            <param name="entity">Entity to be detached</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.IRepository.SaveChangesAsync">
            <summary>
            Saves all made changes in trasaction
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="T:StudyPlatform.Data.Common.Repository">
            <summary>
            Implementation of repository access methods
            for Relational Database Engine
            </summary>
            <typeparam name="T">Type of the data table to which 
            current reposity is attached</typeparam>
        </member>
        <member name="P:StudyPlatform.Data.Common.Repository.Context">
            <summary>
            Entity framework DB context holding connection information and properties
            and tracking entity states 
            </summary>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.DbSet``1">
            <summary>
            Representation of table in database
            </summary>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.AddAsync``1(``0)">
            <summary>
            Adds entity to the database
            </summary>
            <param name="entity">Entity to add</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.AddRangeAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ads collection of entities to the database
            </summary>
            <param name="entities">Enumerable list of entities</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.All``1">
            <summary>
            All records in a table
            </summary>
            <returns>Queryable expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.AllReadonly``1">
            <summary>
            The result collection won't be tracked by the context
            </summary>
            <returns>Expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.DeleteAsync``1(System.Object)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="id">Identificator of record to be deleted</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.Delete``1(``0)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="entity">Entity representing record to be deleted</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.Detach``1(``0)">
            <summary>
            Detaches given entity from the context
            </summary>
            <param name="entity">Entity to be detached</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.Dispose">
            <summary>
            Disposing the context when it is not neede
            Don't have to call this method explicitely
            Leave it to the IoC container
            </summary>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.GetByIdAsync``1(System.Object)">
            <summary>
            Gets specific record from database by primary key
            </summary>
            <param name="id">record identificator</param>
            <returns>Single record</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.SaveChangesAsync">
            <summary>
            Saves all made changes in trasaction
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.Update``1(``0)">
            <summary>
            Updates a record in database
            </summary>
            <param name="entity">Entity for record to be updated</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.Repository.UpdateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates set of records in the database
            </summary>
            <param name="entities">Enumerable collection of entities to be updated</param>
        </member>
        <member name="T:StudyPlatform.Data.Common.SupabaseRepository">
            <summary>
            Implementation of repository access methods
            for Relational Database Engine
            </summary>
            <typeparam name="T">Type of the data table to which 
            current reposity is attached</typeparam>
        </member>
        <member name="P:StudyPlatform.Data.Common.SupabaseRepository.Context">
            <summary>
            Entity framework DB context holding connection information and properties
            and tracking entity states 
            </summary>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.DbSet``1">
            <summary>
            Representation of table in database
            </summary>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.AddAsync``1(``0)">
            <summary>
            Adds entity to the database
            </summary>
            <param name="entity">Entity to add</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.AddRangeAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ads collection of entities to the database
            </summary>
            <param name="entities">Enumerable list of entities</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.All``1">
            <summary>
            All records in a table
            </summary>
            <returns>Queryable expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.AllReadonly``1">
            <summary>
            The result collection won't be tracked by the context
            </summary>
            <returns>Expression tree</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.DeleteAsync``1(System.Object)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="id">Identificator of record to be deleted</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.Delete``1(``0)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="entity">Entity representing record to be deleted</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.Detach``1(``0)">
            <summary>
            Detaches given entity from the context
            </summary>
            <param name="entity">Entity to be detached</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.Dispose">
            <summary>
            Disposing the context when it is not neede
            Don't have to call this method explicitely
            Leave it to the IoC container
            </summary>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.GetByIdAsync``1(System.Object)">
            <summary>
            Gets specific record from database by primary key
            </summary>
            <param name="id">record identificator</param>
            <returns>Single record</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.SaveChangesAsync">
            <summary>
            Saves all made changes in trasaction
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.Update``1(``0)">
            <summary>
            Updates a record in database
            </summary>
            <param name="entity">Entity for record to be updated</param>
        </member>
        <member name="M:StudyPlatform.Data.Common.SupabaseRepository.UpdateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates set of records in the database
            </summary>
            <param name="entities">Enumerable collection of entities to be updated</param>
        </member>
        <member name="T:StudyPlatform.Data.Models.Difficulty">
            <summary>
            An enum class for material difficulty levels.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Models.Material">
            <summary>
            A general material entity that can be extended for specific types of study materials.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Models.MaterialSubGroup">
            <summary>
            A subgroup within a MaterialGroup that contains specific materials.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Models.Subject">
            <summary>
            A subject that groups material groups together.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Models.User">
            <summary>
            PostgreSQL supabase auth.users table representation.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Types.MaterialGroupType">
            <summary>
            A predefined set of material group types. Used to categorize material subgroups in each subject.
            </summary>
        </member>
        <member name="F:StudyPlatform.Data.Types.MaterialGroupType.Flashcards">
            <summary>
            A type for flashcards.
            </summary>
        </member>
        <member name="T:StudyPlatform.Exceptions.ForbiddenAccessException">
            <summary>
            A custom excpetion for cases where a request does not have the right roles.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.ForbiddenAccessException.#ctor(System.String)">
            <summary>
            Initializes the exception with a custom message.
            </summary>
            <param name="message">The message returned by the exception.</param>
        </member>
        <member name="T:StudyPlatform.Exceptions.MaterialCreationException">
            <summary>
            Exception thrown when there is an error during the creation of study material.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.MaterialCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes the exception instance.
            </summary>
            <param name="message">The text message of the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:StudyPlatform.Exceptions.MaterialDeletionException">
            <summary>
            Exception thrown when a material cannot be deleted due to existing dependencies or other causes.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.MaterialDeletionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes the exception instance.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:StudyPlatform.Exceptions.MaterialFetchingException">
            <summary>
            Exception thrown when there is an error during the fetching of study material.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.MaterialFetchingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes the exception instance.
            </summary>
            <param name="message">The text message.</param>
            <param name="innerException">The inner exception instance.</param>
        </member>
        <member name="T:StudyPlatform.Exceptions.MaterialUpdateException">
            <summary>
            Exception thrown when there is an error during the update of study material.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.MaterialUpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Exceptions.MaterialUpdateException"/> class.
            </summary>
            <param name="message">The texte message.</param>
            <param name="innerException">The inner exception instance.</param>
        </member>
        <member name="T:StudyPlatform.Exceptions.SubGroupCreationException">
            <summary>
            Exception thrown when there is an error creating a material subgroup.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.SubGroupCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes the <see cref="T:StudyPlatform.Exceptions.SubGroupCreationException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:StudyPlatform.Exceptions.SubGroupFetchingException">
            <summary>
            An exception thrown in case of an unexpected error during the fetching of material subgroups.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.SubGroupFetchingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Exceptions.SubGroupFetchingException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:StudyPlatform.Exceptions.SubjectCreationException">
            <summary>
            An exception thrown in case of an error during the creation of a subject
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.SubjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes the <see cref="T:StudyPlatform.Exceptions.SubjectCreationException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:StudyPlatform.Exceptions.SubjectFetchingException">
            <summary>
            An exception thrown in case of an error while fetching subjects.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.SubjectFetchingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Exceptions.SubjectFetchingException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:StudyPlatform.Extensions.ClaimsPrincipalExtensions">
            <summary>
            An extension class for the claims prinicpal.
            </summary>
        </member>
        <member name="M:StudyPlatform.Extensions.ClaimsPrincipalExtensions.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            An extension for extracting the userId out of the JWT token.
            </summary>
            <param name="user">The claims principal.</param>
            <returns>The user id if successful.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Returned if the user id claim is missing or invalid.</exception>
        </member>
        <member name="T:StudyPlatform.Middlewares.ExceptionHandlingMiddleware">
            <summary>
            Middleware for global exception handling in the application.
            Converts unhandled exceptions into consistent JSON error responses
            based on <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> (RFC 7807).
            </summary>
        </member>
        <member name="M:StudyPlatform.Middlewares.ExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Middlewares.ExceptionHandlingMiddleware},Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Middlewares.ExceptionHandlingMiddleware"/> class.
            </summary>
            <param name="next">The next middleware component in the pipeline.</param>
            <param name="logger">The logger used to log exception details.</param>
            <param name="environment">The hosting environment (used to show detailed errors in Development).</param>
        </member>
        <member name="M:StudyPlatform.Middlewares.ExceptionHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware logic. Wraps the request delegate in a try-catch block
            to capture and process unhandled exceptions.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
        </member>
        <member name="M:StudyPlatform.Middlewares.ExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Maps exceptions to HTTP status codes and writes a standardized JSON error response.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <param name="ex">The exception that was thrown.</param>
        </member>
        <member name="T:StudyPlatform.Migrations.Init">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.Init.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.Init.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.Init.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.DropOldFlashcardsTable">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.DropOldFlashcardsTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.DropOldFlashcardsTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.DropOldFlashcardsTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.AddDateCreatedToMaterial">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDateCreatedToMaterial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDateCreatedToMaterial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDateCreatedToMaterial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.UnrestrictMaterialTitleLength">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.UnrestrictMaterialTitleLength.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.UnrestrictMaterialTitleLength.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.UnrestrictMaterialTitleLength.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.AddDifficultyEnumToMaterials">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDifficultyEnumToMaterials.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDifficultyEnumToMaterials.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDifficultyEnumToMaterials.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.SupabaseDb.InitSupabaseMindmaps">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.InitSupabaseMindmaps.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.InitSupabaseMindmaps.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.InitSupabaseMindmaps.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.SupabaseDb.RenameMindmmapFields">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.RenameMindmmapFields.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.RenameMindmmapFields.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.RenameMindmmapFields.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.SupabaseDb.AddTitleAndDescriptionToMindmap">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.AddTitleAndDescriptionToMindmap.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.AddTitleAndDescriptionToMindmap.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.AddTitleAndDescriptionToMindmap.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapProps">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapProps.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapProps.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapProps.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapIdToInt">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapIdToInt.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapIdToInt.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.SupabaseDb.UpdateMindmapIdToInt.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Models.Common.AutoMapper">
            <summary>
            Defines the AutoMapper initialization and maps.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.CreateMaterialSubGroupViewModel">
            <summary>
            View model used when creating a new material subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateMaterialSubGroupViewModel.Title">
            <summary>
            The title of the subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateMaterialSubGroupViewModel.MaterialGroupType">
            <summary>
            The type of material group this subgroup belongs to.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateMaterialSubGroupViewModel.SubjectId">
            <summary>
            The ID of the subject this subgroup belongs to.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.CreateSubjectViewModel">
            <summary>
            View model used when creating a new subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateSubjectViewModel.Title">
            <summary>
            The title of the subject.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.DTOs.MaterialSubGroupDTO">
            <summary>
            Data transfer object returned when working with material subgroups.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.Id">
            <summary>
            The unique identifier of the material subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.Title">
            <summary>
            The title of the subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.MaterialGroupType">
            <summary>
            The type of material group this subgroup belongs to.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.SubjectId">
            <summary>
            The ID of the subject this subgroup belongs to.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.DateCreated">
            <summary>
            The UTC date when this subgroup was created.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.Materials">
            <summary>
            List of materials in the sub group, optional.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.DTOs.SubjectDto">
            <summary>
            Data transfer object returned when working with subjects.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.Id">
            <summary>
            The unique identifier of the subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.Title">
            <summary>
            The title of the subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.UserId">
            <summary>
            The ID of the user who owns this subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.DateCreated">
            <summary>
            The UTC date when the subject was created.
            </summary>
        </member>
        <member name="T:StudyPlatform.Services.Flashcards.FlashcardsService">
            <summary>
            Service for managing flashcards: create, edit, retrieve, and delete.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.#ctor(StudyPlatform.Data.Common.IRepository,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Services.Flashcards.FlashcardsService},AutoMapper.IMapper,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Services.Flashcards.FlashcardsService"/> class.
            </summary>
            <param name="repo">The Repository instance.</param>
            <param name="logger">The logger instance.</param>
            <param name="mapper">The AutoMapper instance.</param>
            <param name="client">The HttpClient instance.</param>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.CreateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid)">
            <summary>
            Creates a new flashcard for a specific user.
            </summary>
            <param name="model">The flashcard view model containing data.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>The created <see cref="T:StudyPlatform.Data.Models.Flashcard"/>.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.UpdateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid,System.Int32)">
            <summary>
            Edits an existing flashcard for a specific user.
            </summary>
            <param name="model">The flashcard view model containing updated data.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <param name="id">The ID of the flashcard.</param>
            <returns>The updated <see cref="T:StudyPlatform.Data.Models.Flashcard"/>.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.GetAsync(System.Guid,System.Int32)">
            <summary>
            Retrieves multiple flashcards by their IDs for a specific user.
            </summary>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <param name="id">The ID of the flashcard.</param>
            <returns>A collection of <see cref="T:StudyPlatform.Data.Models.Flashcard"/> objects.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.DeleteAsync(System.Int32[],System.Guid)">
            <summary>
            Deletes multiple flashcards by their IDs for a specific user.
            </summary>
            <param name="ids">Array of flashcard IDs to delete.</param>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <returns>A task representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.GetAllAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.GenerateAsync(System.Guid,StudyPlatform.Models.GenerateFlashcardsViewModel)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.CreateBulkAsync(System.Collections.Generic.IEnumerable{StudyPlatform.Models.CreateFlashcardViewModel},System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Services.Flashcards.IFlashcardsService">
            <summary>
            Provides operations for creating, editing, retrieving, and deleting flashcards.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.CreateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid)">
            <summary>
            Creates a new flashcard for the specified user.
            </summary>
            <param name="model">The flashcard data to create.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains the created <see cref="T:StudyPlatform.Models.DTOs.FlashcardDTO"/>.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.CreateBulkAsync(System.Collections.Generic.IEnumerable{StudyPlatform.Models.CreateFlashcardViewModel},System.Guid)">
            <summary>
            Creates new flashcards for the specified user.
            </summary>
            <param name="model">The flashcards data to create.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains the created <see cref="T:StudyPlatform.Models.DTOs.FlashcardDTO"/>.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.UpdateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid,System.Int32)">
            <summary>
            Edits an existing flashcard for the specified user.
            </summary>
            <param name="model">The updated flashcard data.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains the updated <see cref="T:StudyPlatform.Data.Models.Flashcard"/>.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.GetAsync(System.Guid,System.Int32)">
            <summary>
            Retrieves a flashcard by it's ID for the specified user.
            </summary>
            <param name="id">A flashcard ID to retrieve.</param>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains a of <see cref="T:StudyPlatform.Models.DTOs.FlashcardDTO"/> object.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.GetAllAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves all flashcards for the specified user.
            </summary>
            <param name="userId">The specified userId.</param>
            <param name="subjectId">The optional subjectId parameter.</param>
            <param name="groupId">Specifies the group from which to select flashcards. If left unspecified will return all flashcards..</param>
            <returns>A collection of flashcards if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.DeleteAsync(System.Int32[],System.Guid)">
            <summary>
            Deletes flashcards by their IDs for the specified user.
            </summary>
            <param name="ids">An array of flashcard IDs to delete.</param>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.GenerateAsync(System.Guid,StudyPlatform.Models.GenerateFlashcardsViewModel)">
            <summary>
            Request the generation of flashcards using AI based on the provided model from a microservice.
            </summary>
            <param name="userId">The user's ID</param>
            <param name="model">The model containing the download url and other prompt data.</param>
            <returns></returns>
        </member>
        <member name="T:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService">
            <summary>
            Defines methods for managing material subgroups.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.GetSubGroupsBySubjectAsync(System.Int32,System.Guid,System.Boolean)">
            <summary>
            Retrieves all material subgroups for a given subject.
            </summary>
            <param name="subjectId">The subject ID.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <param name="includeMaterials">Whether or not to include the materials in each group.</param>
            <returns>A collection of subgroups.</returns>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.GetSubGroupByIdAsync(System.Int32,System.Guid)">
            <summary>
            Retrieves a material subgroup by its ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <returns>The subgroup if found, otherwise null.</returns>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.CreateSubGroupAsync(StudyPlatform.Models.CreateMaterialSubGroupViewModel,System.Guid)">
            <summary>
            Creates a new material subgroup.
            </summary>
            <param name="model">The subgroup creation model.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <returns>The created subgroup DTO.</returns>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.DeleteSubGroupAsync(System.Int32,System.Guid)">
            <summary>
            Deletes a material subgroup by ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <returns>True if deleted, false otherwise.</returns>
        </member>
        <member name="T:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService">
            <summary>
            Service for managing material subgroups.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.#ctor(StudyPlatform.Data.Common.IRepository,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService},AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService"/> class.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.GetSubGroupsBySubjectAsync(System.Int32,System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.GetSubGroupByIdAsync(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.CreateSubGroupAsync(StudyPlatform.Models.CreateMaterialSubGroupViewModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.DeleteSubGroupAsync(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Services.Mindmaps.IMindmapsService">
            <summary>
            An interface defining operations related to mindmaps.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.IMindmapsService.CreateAsync(StudyPlatform.Models.CreateMindmapViewModel,System.Guid)">
            <summary>
            Generates a set of mindmaps from the provided model.
            </summary>
            <param name="model"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.IMindmapsService.GetAllAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates a set of mindmaps from the provided model.
            </summary>
            <param name="userId"></param>
            <param name="subGroupId"></param>
            <param name="subjectId"></param>
            <returns></returns>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.IMindmapsService.GenerateAsync(StudyPlatform.Models.GenerateMindmapsViewModel,System.Guid)">
            <summary>
            Generates a set of mindmaps from the provided model.
            </summary>
            <param name="model"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.IMindmapsService.DeleteAsync(System.Int32[],System.Guid)">
            <summary>
            Deletes mindmaps by their IDs for the specified user.
            </summary>
            <param name="ids">An array of mindmaps IDs to delete.</param>
            <param name="userId">The ID of the user who owns the mindmaps.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.IMindmapsService.UpdateAsync(StudyPlatform.Models.CreateMindmapViewModel,System.Guid,System.Int32)">
            <summary>
            Update a mindmap for the specified user.
            </summary>
            <param name="id">The mindmap id.</param>
            <param name="userId">The ID of the user who owns the mindmaps.</param>
            <param name="model">The model by which to update the mindmap.</param>
            <returns>An updated MindmapDTO.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.MindmapsService.#ctor(StudyPlatform.Data.Common.SupabaseRepository,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Services.Mindmaps.MindmapsService},AutoMapper.IMapper,System.Net.Http.HttpClient)">
            <summary>
            Initializes the service and injects dependencies.
            </summary>
            <param name="repo"></param>
            <param name="logger"></param>
            <param name="mapper"></param>
            <param name="client"></param>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.MindmapsService.CreateAsync(StudyPlatform.Models.CreateMindmapViewModel,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.MindmapsService.DeleteAsync(System.Int32[],System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.MindmapsService.GenerateAsync(StudyPlatform.Models.GenerateMindmapsViewModel,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:StudyPlatform.Services.Mindmaps.MindmapsService.GetAllAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:StudyPlatform.Services.Subjects.ISubjectsService">
            <summary>
            Defines methods for managing subjects.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.GetSubjectsByUserAsync(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Retrieves all subjects belonging to a given user.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="includeGroups">Query parameter for whether or not to include MaterialSubGroups</param>
            <param name="includeGroupsSummary">Query parameter for whether or not to include MaterialSubGroups summary ( without materials )</param>
            <returns>A collection of subjects.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.GetSubjectByIdAsync(System.Int32,System.Guid)">
            <summary>
            Retrieves a single subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <param name="userId">The user ID.</param>
            <returns>The subject DTO if found, otherwise null.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.CreateSubjectAsync(StudyPlatform.Models.CreateSubjectViewModel,System.Guid)">
            <summary>
            Creates a new subject.
            </summary>
            <param name="model">The subject creation model.</param>
            <param name="userId">The user ID.</param>
            <returns>The created subject DTO.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.DeleteSubjectAsync(System.Int32,System.Guid)">
            <summary>
            Deletes a subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <param name="userId">The user ID.</param>
            <returns>True if deleted, false otherwise.</returns>
        </member>
        <member name="T:StudyPlatform.Services.Subjects.SubjectsService">
            <summary>
            Service for managing subjects.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.#ctor(StudyPlatform.Data.Common.IRepository,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Services.Subjects.SubjectsService},AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Services.Subjects.SubjectsService"/> class.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.GetSubjectsByUserAsync(System.Guid,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.GetSubjectByIdAsync(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.CreateSubjectAsync(StudyPlatform.Models.CreateSubjectViewModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.DeleteSubjectAsync(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
    </members>
</doc>
