<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StudyPlatform</name>
    </assembly>
    <members>
        <member name="T:StudyPlatform.Controllers.FlashcardsController">
            <summary>
            Provides endpoints for managing flashcards.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.#ctor(StudyPlatform.Services.Flashcards.IFlashcardsService)">
            <summary>
            A constructor for injecting the services.
            </summary>
            <param name="flashcardsService">The flashcards service, dependency injected.</param>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Create(StudyPlatform.Models.CreateFlashcardViewModel)">
            <summary>
            Endpoint for creating a new flashcard.
            </summary>
            <param name="model">The model for the flashcard created by the user.</param>
            <returns>A new flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.CreateBulk(System.Collections.Generic.IEnumerable{StudyPlatform.Models.CreateFlashcardViewModel})">
            <summary>
            Endpoint for creating a new flashcards from a list of models.
            </summary>
            <param name="model">The model for the flashcard created by the user.</param>
            <returns>A new flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Get(System.Int32)">
            <summary>
            Endpoint for getting a flashcard by it's ID.
            </summary>
            <param name="id">The card id..</param>
            <returns>A flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Get">
            <summary>
            Endpoint for getting all flashcards that the user owns.
            </summary>
            <returns>A list of flashcards if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.GetAllFromGroup(System.Int32)">
            <summary>
            Endpoint for getting all flashcards that the user owns in a certain group.
            </summary>
            <returns>A list of flashcards if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Update(StudyPlatform.Models.CreateFlashcardViewModel,System.Int32)">
            <summary>
            Endpoint for updating a specific flashcard that the user owns.
            </summary>
            <param name="model">The model for updating the flashcard.</param>
            <param name="id">The id of the flashcard.</param>
            <returns>An edited flashcard if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Delete(System.Int32[])">
            <summary>
            Endpoint for deleting an array of flashcards by their IDs.
            </summary>
            <param name="ids">The array of flashcard ids.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.FlashcardsController.Generate(StudyPlatform.Models.GenerateFlashcardsViewModel)">
            <summary>
            Endpoint for generating flashcards from a file.
            </summary>
            <param name="model">The model containing the file's download url and other prompt data.</param>
            <returns>A list of flashcards if successful.</returns>
        </member>
        <member name="T:StudyPlatform.Controllers.MaterialSubGroupsController">
            <summary>
            API controller for managing material subgroups.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.#ctor(StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService)">
            <summary>
            Initializes the controller.
            </summary>
            <param name="service">The service DI.</param>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.GetBySubject(System.Int32,System.Boolean)">
            <summary>
            Gets all material subgroups for a subject.
            </summary>
            <param name="subjectId">The subject ID.</param>
            <param name="includeMaterials">Whether or not to include the materials in each group.</param>
            <returns>A list of subgroups.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.Get(System.Int32)">
            <summary>
            Gets a single material subgroup by ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <returns>The subgroup if found.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.Create(StudyPlatform.Models.CreateMaterialSubGroupViewModel)">
            <summary>
            Creates a new material subgroup.
            </summary>
            <param name="model">The subgroup creation model.</param>
            <returns>The created subgroup.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.MaterialSubGroupsController.Delete(System.Int32)">
            <summary>
            Deletes a material subgroup by ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <returns>No content if deleted.</returns>
        </member>
        <member name="T:StudyPlatform.Controllers.SubjectsController">
            <summary>
            API controller for managing subjects.
            </summary>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.#ctor(StudyPlatform.Services.Subjects.ISubjectsService)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Controllers.SubjectsController"/> class.
            </summary>
            <param name="service">The subjects service DI.</param>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.GetSubjectsByUser(System.Boolean,System.Boolean)">
            <summary>
            Gets all subjects for a user.
            </summary>
            <param name="includeGroups">Whether or not to include material sub groups with their materials.</param>
            <param name="includeGroupsSummary">Whether or not to include material sub groups without their materials.</param>
            <returns>A list of subjects.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.GetSubject(System.Int32)">
            <summary>
            Gets a single subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <returns>The subject if found.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.CreateSubject(StudyPlatform.Models.CreateSubjectViewModel)">
            <summary>
            Creates a new subject.
            </summary>
            <param name="model">The subject creation model.</param>
            <returns>The created subject.</returns>
        </member>
        <member name="M:StudyPlatform.Controllers.SubjectsController.DeleteSubject(System.Int32)">
            <summary>
            Deletes a subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <returns>No content if deleted.</returns>
        </member>
        <member name="T:StudyPlatform.Data.Common.AppConstants">
            <summary>
            A static class used to abstract the commonly used constants, such as the base URL for microservices.
            </summary>
        </member>
        <member name="F:StudyPlatform.Data.Common.AppConstants.FLASHCARDS_MICROSERVICE_BASE_URL">
            <summary>
            Base url for flashcards microservice.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Models.Material">
            <summary>
            A general material entity that can be extended for specific types of study materials.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Models.MaterialSubGroup">
            <summary>
            A subgroup within a MaterialGroup that contains specific materials.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Models.Subject">
            <summary>
            A subject that groups material groups together.
            </summary>
        </member>
        <member name="T:StudyPlatform.Data.Types.MaterialGroupType">
            <summary>
            A predefined set of material group types. Used to categorize material subgroups in each subject.
            </summary>
        </member>
        <member name="F:StudyPlatform.Data.Types.MaterialGroupType.Flashcards">
            <summary>
            A type for flashcards.
            </summary>
        </member>
        <member name="T:StudyPlatform.Exceptions.ForbiddenAccessException">
            <summary>
            A custom excpetion for cases where a request does not have the right roles.
            </summary>
        </member>
        <member name="M:StudyPlatform.Exceptions.ForbiddenAccessException.#ctor(System.String)">
            <summary>
            Initializes the exception with a custom message.
            </summary>
            <param name="message">The message returned by the exception.</param>
        </member>
        <member name="T:StudyPlatform.Extensions.ClaimsPrincipalExtensions">
            <summary>
            An extension class for the claims prinicpal.
            </summary>
        </member>
        <member name="M:StudyPlatform.Extensions.ClaimsPrincipalExtensions.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            An extension for extracting the userId out of the JWT token.
            </summary>
            <param name="user">The claims principal.</param>
            <returns>The user id if successful.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Returned if the user id claim is missing or invalid.</exception>
        </member>
        <member name="T:StudyPlatform.Middlewares.ExceptionHandlingMiddleware">
            <summary>
            Middleware that handles exceptions globally for the application.
            Catches unhandled exceptions, maps them to appropriate HTTP status codes,
            and returns a JSON error response.
            </summary>
        </member>
        <member name="M:StudyPlatform.Middlewares.ExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Middlewares.ExceptionHandlingMiddleware"/> class.
            </summary>
            <param name="next">The next middleware component in the pipeline.</param>
        </member>
        <member name="M:StudyPlatform.Middlewares.ExceptionHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware logic. Wraps the request delegate in a try-catch block
            to capture and process unhandled exceptions.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
        </member>
        <member name="M:StudyPlatform.Middlewares.ExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Maps exceptions to HTTP status codes and writes a JSON error response.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <param name="ex">The exception that was thrown.</param>
        </member>
        <member name="T:StudyPlatform.Migrations.Init">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.Init.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.Init.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.Init.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.DropOldFlashcardsTable">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.DropOldFlashcardsTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.DropOldFlashcardsTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.DropOldFlashcardsTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Migrations.AddDateCreatedToMaterial">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDateCreatedToMaterial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDateCreatedToMaterial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Migrations.AddDateCreatedToMaterial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Models.Common.AutoMapper">
            <summary>
            Defines the AutoMapper initialization and maps.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.CreateMaterialSubGroupViewModel">
            <summary>
            View model used when creating a new material subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateMaterialSubGroupViewModel.Title">
            <summary>
            The title of the subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateMaterialSubGroupViewModel.MaterialGroupType">
            <summary>
            The type of material group this subgroup belongs to.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateMaterialSubGroupViewModel.SubjectId">
            <summary>
            The ID of the subject this subgroup belongs to.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.CreateSubjectViewModel">
            <summary>
            View model used when creating a new subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.CreateSubjectViewModel.Title">
            <summary>
            The title of the subject.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.DTOs.MaterialSubGroupDTO">
            <summary>
            Data transfer object returned when working with material subgroups.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.Id">
            <summary>
            The unique identifier of the material subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.Title">
            <summary>
            The title of the subgroup.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.MaterialGroupType">
            <summary>
            The type of material group this subgroup belongs to.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.SubjectId">
            <summary>
            The ID of the subject this subgroup belongs to.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.DateCreated">
            <summary>
            The UTC date when this subgroup was created.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.MaterialSubGroupDTO.Materials">
            <summary>
            List of materials in the sub group, optional.
            </summary>
        </member>
        <member name="T:StudyPlatform.Models.DTOs.SubjectDto">
            <summary>
            Data transfer object returned when working with subjects.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.Id">
            <summary>
            The unique identifier of the subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.Title">
            <summary>
            The title of the subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.UserId">
            <summary>
            The ID of the user who owns this subject.
            </summary>
        </member>
        <member name="P:StudyPlatform.Models.DTOs.SubjectDto.DateCreated">
            <summary>
            The UTC date when the subject was created.
            </summary>
        </member>
        <member name="T:StudyPlatform.Services.Flashcards.FlashcardsService">
            <summary>
            Service for managing flashcards: create, edit, retrieve, and delete.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.#ctor(StudyPlatform.Data.AppDbContext,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Services.Flashcards.FlashcardsService},AutoMapper.IMapper,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Services.Flashcards.FlashcardsService"/> class.
            </summary>
            <param name="context">The database context.</param>
            <param name="logger">The logger instance.</param>
            <param name="mapper">The AutoMapper instance.</param>
            <param name="client">The HttpClient instance.</param>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.CreateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid)">
            <summary>
            Creates a new flashcard for a specific user.
            </summary>
            <param name="model">The flashcard view model containing data.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>The created <see cref="T:StudyPlatform.Data.Models.Flashcard"/>.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.UpdateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid,System.Int32)">
            <summary>
            Edits an existing flashcard for a specific user.
            </summary>
            <param name="model">The flashcard view model containing updated data.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <param name="id">The ID of the flashcard.</param>
            <returns>The updated <see cref="T:StudyPlatform.Data.Models.Flashcard"/>.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.GetAsync(System.Guid,System.Int32)">
            <summary>
            Retrieves multiple flashcards by their IDs for a specific user.
            </summary>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <param name="id">The ID of the flashcard.</param>
            <returns>A collection of <see cref="T:StudyPlatform.Data.Models.Flashcard"/> objects.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.DeleteAsync(System.Int32[],System.Guid)">
            <summary>
            Deletes multiple flashcards by their IDs for a specific user.
            </summary>
            <param name="ids">Array of flashcard IDs to delete.</param>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <returns>A task representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.GetAllAsync(System.Guid,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.GenerateAsync(System.Guid,StudyPlatform.Models.GenerateFlashcardsViewModel)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.FlashcardsService.CreateBulkAsync(System.Collections.Generic.IEnumerable{StudyPlatform.Models.CreateFlashcardViewModel},System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Services.Flashcards.IFlashcardsService">
            <summary>
            Provides operations for creating, editing, retrieving, and deleting flashcards.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.CreateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid)">
            <summary>
            Creates a new flashcard for the specified user.
            </summary>
            <param name="model">The flashcard data to create.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains the created <see cref="T:StudyPlatform.Models.DTOs.FlashcardDTO"/>.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.CreateBulkAsync(System.Collections.Generic.IEnumerable{StudyPlatform.Models.CreateFlashcardViewModel},System.Guid)">
            <summary>
            Creates new flashcards for the specified user.
            </summary>
            <param name="model">The flashcards data to create.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains the created <see cref="T:StudyPlatform.Models.DTOs.FlashcardDTO"/>.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.UpdateAsync(StudyPlatform.Models.CreateFlashcardViewModel,System.Guid,System.Int32)">
            <summary>
            Edits an existing flashcard for the specified user.
            </summary>
            <param name="model">The updated flashcard data.</param>
            <param name="userId">The ID of the user who owns the flashcard.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains the updated <see cref="T:StudyPlatform.Data.Models.Flashcard"/>.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.GetAsync(System.Guid,System.Int32)">
            <summary>
            Retrieves a flashcard by it's ID for the specified user.
            </summary>
            <param name="id">A flashcard ID to retrieve.</param>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            The task result contains a of <see cref="T:StudyPlatform.Models.DTOs.FlashcardDTO"/> object.
            </returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.GetAllAsync(System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves all flashcards for the specified user.
            </summary>
            <param name="userId">The specified userId.</param>
            <param name="groupId">Specifies the group from which to select flashcards. If left unspecified will return all flashcards..</param>
            <returns>A collection of flashcards if successful.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.DeleteAsync(System.Int32[],System.Guid)">
            <summary>
            Deletes flashcards by their IDs for the specified user.
            </summary>
            <param name="ids">An array of flashcard IDs to delete.</param>
            <param name="userId">The ID of the user who owns the flashcards.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous delete operation.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Flashcards.IFlashcardsService.GenerateAsync(System.Guid,StudyPlatform.Models.GenerateFlashcardsViewModel)">
            <summary>
            Request the generation of flashcards using AI based on the provided model from a microservice.
            </summary>
            <param name="userId">The user's ID</param>
            <param name="model">The model containing the download url and other prompt data.</param>
            <returns></returns>
        </member>
        <member name="T:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService">
            <summary>
            Defines methods for managing material subgroups.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.GetSubGroupsBySubjectAsync(System.Int32,System.Guid,System.Boolean)">
            <summary>
            Retrieves all material subgroups for a given subject.
            </summary>
            <param name="subjectId">The subject ID.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <param name="includeMaterials">Whether or not to include the materials in each group.</param>
            <returns>A collection of subgroups.</returns>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.GetSubGroupByIdAsync(System.Int32,System.Guid)">
            <summary>
            Retrieves a material subgroup by its ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <returns>The subgroup if found, otherwise null.</returns>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.CreateSubGroupAsync(StudyPlatform.Models.CreateMaterialSubGroupViewModel,System.Guid)">
            <summary>
            Creates a new material subgroup.
            </summary>
            <param name="model">The subgroup creation model.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <returns>The created subgroup DTO.</returns>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.IMaterialSubGroupsService.DeleteSubGroupAsync(System.Int32,System.Guid)">
            <summary>
            Deletes a material subgroup by ID.
            </summary>
            <param name="id">The subgroup ID.</param>
            <param name="userId">The ID of the authenticated user.</param>
            <returns>True if deleted, false otherwise.</returns>
        </member>
        <member name="T:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService">
            <summary>
            Service for managing material subgroups.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.#ctor(StudyPlatform.Data.AppDbContext,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService},AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService"/> class.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.GetSubGroupsBySubjectAsync(System.Int32,System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.GetSubGroupByIdAsync(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.CreateSubGroupAsync(StudyPlatform.Models.CreateMaterialSubGroupViewModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.MaterialSubGroups.MaterialSubGroupsService.DeleteSubGroupAsync(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:StudyPlatform.Services.Subjects.ISubjectsService">
            <summary>
            Defines methods for managing subjects.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.GetSubjectsByUserAsync(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Retrieves all subjects belonging to a given user.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="includeGroups">Query parameter for whether or not to include MaterialSubGroups</param>
            <param name="includeGroupsSummary">Query parameter for whether or not to include MaterialSubGroups summary ( without materials )</param>
            <returns>A collection of subjects.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.GetSubjectByIdAsync(System.Int32)">
            <summary>
            Retrieves a single subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <returns>The subject DTO if found, otherwise null.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.CreateSubjectAsync(StudyPlatform.Models.CreateSubjectViewModel,System.Guid)">
            <summary>
            Creates a new subject.
            </summary>
            <param name="model">The subject creation model.</param>
            <param name="userId">The user ID.</param>
            <returns>The created subject DTO.</returns>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.ISubjectsService.DeleteSubjectAsync(System.Int32,System.Guid)">
            <summary>
            Deletes a subject by ID.
            </summary>
            <param name="id">The subject ID.</param>
            <param name="userId">The user ID.</param>
            <returns>True if deleted, false otherwise.</returns>
        </member>
        <member name="T:StudyPlatform.Services.Subjects.SubjectsService">
            <summary>
            Service for managing subjects.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.#ctor(StudyPlatform.Data.AppDbContext,Microsoft.Extensions.Logging.ILogger{StudyPlatform.Services.Subjects.SubjectsService},AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:StudyPlatform.Services.Subjects.SubjectsService"/> class.
            </summary>
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.GetSubjectsByUserAsync(System.Guid,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.GetSubjectByIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.CreateSubjectAsync(StudyPlatform.Models.CreateSubjectViewModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:StudyPlatform.Services.Subjects.SubjectsService.DeleteSubjectAsync(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
    </members>
</doc>
